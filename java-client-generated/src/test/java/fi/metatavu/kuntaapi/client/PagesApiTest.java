/**
 * Kunta API
 * Solution to combine municipality services under single API.
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package fi.metatavu.kuntaapi.client;

import fi.metatavu.kuntaapi.ApiException;
import fi.metatavu.kuntaapi.client.model.BadRequest;
import fi.metatavu.kuntaapi.client.model.Forbidden;
import fi.metatavu.kuntaapi.client.model.InternalServerError;
import fi.metatavu.kuntaapi.client.model.Page;
import fi.metatavu.kuntaapi.client.model.LocalizedValue;
import fi.metatavu.kuntaapi.client.model.Attachment;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PagesApi
 */
public class PagesApiTest {

    private final PagesApi api = new PagesApi();

    
    /**
     * Deletes an organizations page
     *
     * Deletes single organization page 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOrganizationPageTest() throws ApiException {
        String organizationId = null;
        String pageId = null;
        // api.deleteOrganizationPage(organizationId, pageId);

        // TODO: test validations
    }
    
    /**
     * Finds organizations page
     *
     * Finds single organization page 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findOrganizationPageTest() throws ApiException {
        String organizationId = null;
        String pageId = null;
        // Page response = api.findOrganizationPage(organizationId, pageId);

        // TODO: test validations
    }
    
    /**
     * Returns organizations page content in all available languages
     *
     * Returns single organization page content in all available languages 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findOrganizationPageContentTest() throws ApiException {
        String organizationId = null;
        String pageId = null;
        // List<LocalizedValue> response = api.findOrganizationPageContent(organizationId, pageId);

        // TODO: test validations
    }
    
    /**
     * Returns a single organiztion page image
     *
     * Returns a single organiztion page image 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findOrganizationPageImageTest() throws ApiException {
        String organizationId = null;
        String pageId = null;
        String imageId = null;
        // Attachment response = api.findOrganizationPageImage(organizationId, pageId, imageId);

        // TODO: test validations
    }
    
    /**
     * Returns an organization page image data
     *
     * Returns an organization page image data 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrganizationPageImageDataTest() throws ApiException {
        String organizationId = null;
        String pageId = null;
        String imageId = null;
        Integer size = null;
        // byte[] response = api.getOrganizationPageImageData(organizationId, pageId, imageId, size);

        // TODO: test validations
    }
    
    /**
     * Returns a list of organization page images
     *
     * Returns a list of organization page images 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOrganizationPageImagesTest() throws ApiException {
        String organizationId = null;
        String pageId = null;
        String type = null;
        // List<Attachment> response = api.listOrganizationPageImages(organizationId, pageId, type);

        // TODO: test validations
    }
    
    /**
     * Lists organizations pages
     *
     * Lists organizations pages 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOrganizationPagesTest() throws ApiException {
        String organizationId = null;
        String parentId = null;
        String path = null;
        String search = null;
        String sortBy = null;
        String sortDir = null;
        Long firstResult = null;
        Long maxResults = null;
        // List<Page> response = api.listOrganizationPages(organizationId, parentId, path, search, sortBy, sortDir, firstResult, maxResults);

        // TODO: test validations
    }
    
}
