/**
 * Kunta API
 * Solution to combine municipality services under single API.
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package fi.metatavu.kuntaapi.client;

import fi.metatavu.kuntaapi.ApiException;
import fi.metatavu.kuntaapi.client.model.BadRequest;
import fi.metatavu.kuntaapi.client.model.Service;
import fi.metatavu.kuntaapi.client.model.Forbidden;
import fi.metatavu.kuntaapi.client.model.InternalServerError;
import fi.metatavu.kuntaapi.client.model.NotFound;
import fi.metatavu.kuntaapi.client.model.ElectronicServiceChannel;
import fi.metatavu.kuntaapi.client.model.PhoneServiceChannel;
import fi.metatavu.kuntaapi.client.model.PrintableFormServiceChannel;
import fi.metatavu.kuntaapi.client.model.ServiceLocationServiceChannel;
import fi.metatavu.kuntaapi.client.model.WebPageServiceChannel;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServicesApi
 */
public class ServicesApiTest {

    private final ServicesApi api = new ServicesApi();

    
    /**
     * Create service
     *
     * Creates new service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createServiceTest() throws ApiException {
        Service body = null;
        // Service response = api.createService(body);

        // TODO: test validations
    }
    
    /**
     * Finds a service by id
     *
     * Finds service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findServiceTest() throws ApiException {
        String serviceId = null;
        // Service response = api.findService(serviceId);

        // TODO: test validations
    }
    
    /**
     * finds ElectronicChannel by electronicChannelId
     *
     * finds ElectronicChannels by electronicChannelId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findServiceElectronicChannelTest() throws ApiException {
        String serviceId = null;
        String electronicChannelId = null;
        // ElectronicServiceChannel response = api.findServiceElectronicChannel(serviceId, electronicChannelId);

        // TODO: test validations
    }
    
    /**
     * finds PhoneChannel by phoneChannelId
     *
     * finds PhoneChannels by phoneChannelId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findServicePhoneChannelTest() throws ApiException {
        String serviceId = null;
        String phoneChannelId = null;
        // PhoneServiceChannel response = api.findServicePhoneChannel(serviceId, phoneChannelId);

        // TODO: test validations
    }
    
    /**
     * finds PrintableFormChannel by printableFormChannelId
     *
     * finds PrintableFormChannels by printableFormChannelId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findServicePrintableFormChannelTest() throws ApiException {
        String serviceId = null;
        String printableFormChannelId = null;
        // PrintableFormServiceChannel response = api.findServicePrintableFormChannel(serviceId, printableFormChannelId);

        // TODO: test validations
    }
    
    /**
     * finds ServiceLocationChannel by serviceLocationChannelId
     *
     * finds ServiceLocationChannels by serviceLocationChannelId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findServiceServiceLocationChannelTest() throws ApiException {
        String serviceId = null;
        String serviceLocationChannelId = null;
        // ServiceLocationServiceChannel response = api.findServiceServiceLocationChannel(serviceId, serviceLocationChannelId);

        // TODO: test validations
    }
    
    /**
     * finds WebPageChannel by webPageChannelId
     *
     * finds WebPageChannels by webPageChannelId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findServiceWebPageChannelTest() throws ApiException {
        String serviceId = null;
        String webPageChannelId = null;
        // WebPageServiceChannel response = api.findServiceWebPageChannel(serviceId, webPageChannelId);

        // TODO: test validations
    }
    
    /**
     * Lists ElectronicChannels by serviceId
     *
     * Lists ElectronicChannels by serviceId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceElectronicChannelsTest() throws ApiException {
        String serviceId = null;
        Long firstResult = null;
        Long maxResults = null;
        // List<ElectronicServiceChannel> response = api.listServiceElectronicChannels(serviceId, firstResult, maxResults);

        // TODO: test validations
    }
    
    /**
     * Lists PhoneChannels by serviceId
     *
     * Lists PhoneChannels by serviceId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServicePhoneChannelsTest() throws ApiException {
        String serviceId = null;
        Long firstResult = null;
        Long maxResults = null;
        // List<PhoneServiceChannel> response = api.listServicePhoneChannels(serviceId, firstResult, maxResults);

        // TODO: test validations
    }
    
    /**
     * Lists PrintableFormChannels by serviceId
     *
     * Lists PrintableFormChannels by serviceId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServicePrintableFormChannelsTest() throws ApiException {
        String serviceId = null;
        Long firstResult = null;
        Long maxResults = null;
        // List<PrintableFormServiceChannel> response = api.listServicePrintableFormChannels(serviceId, firstResult, maxResults);

        // TODO: test validations
    }
    
    /**
     * Lists ServiceLocationChannels by serviceId
     *
     * Lists ServiceLocationChannels by serviceId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceServiceLocationChannelsTest() throws ApiException {
        String serviceId = null;
        Long firstResult = null;
        Long maxResults = null;
        // List<ServiceLocationServiceChannel> response = api.listServiceServiceLocationChannels(serviceId, firstResult, maxResults);

        // TODO: test validations
    }
    
    /**
     * Lists WebPageChannels by serviceId
     *
     * Lists WebPageChannels by serviceId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceWebPageChannelsTest() throws ApiException {
        String serviceId = null;
        Long firstResult = null;
        Long maxResults = null;
        // List<WebPageServiceChannel> response = api.listServiceWebPageChannels(serviceId, firstResult, maxResults);

        // TODO: test validations
    }
    
    /**
     * Service list
     *
     * Lists services
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServicesTest() throws ApiException {
        String organizationId = null;
        String search = null;
        String sortBy = null;
        String sortDir = null;
        Long firstResult = null;
        Long maxResults = null;
        String electronicServiceChannelId = null;
        String phoneServiceChannelId = null;
        String printableFormServiceChannelId = null;
        String serviceLocationServiceChannelId = null;
        String webPageServiceChannelId = null;
        // List<Service> response = api.listServices(organizationId, search, sortBy, sortDir, firstResult, maxResults, electronicServiceChannelId, phoneServiceChannelId, printableFormServiceChannelId, serviceLocationServiceChannelId, webPageServiceChannelId);

        // TODO: test validations
    }
    
    /**
     * Updates service
     *
     * Updates service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServiceTest() throws ApiException {
        String serviceId = null;
        Service body = null;
        // Service response = api.updateService(serviceId, body);

        // TODO: test validations
    }
    
}
