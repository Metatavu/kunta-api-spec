/**
 * Kunta API
 * Solution to combine municipality services under single API.
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package fi.metatavu.kuntaapi.client;

import fi.metatavu.kuntaapi.ApiException;
import fi.metatavu.kuntaapi.client.model.BadRequest;
import fi.metatavu.kuntaapi.client.model.Agency;
import fi.metatavu.kuntaapi.client.model.Forbidden;
import fi.metatavu.kuntaapi.client.model.InternalServerError;
import fi.metatavu.kuntaapi.client.model.Route;
import fi.metatavu.kuntaapi.client.model.Schedule;
import fi.metatavu.kuntaapi.client.model.Stop;
import fi.metatavu.kuntaapi.client.model.StopTime;
import fi.metatavu.kuntaapi.client.model.Trip;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PublicTransportApi
 */
public class PublicTransportApiTest {

    private final PublicTransportApi api = new PublicTransportApi();

    
    /**
     * Finds an organizations public transport agency
     *
     * Finds organization&#39;s single public transport agency 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findOrganizationPublicTransportAgencyTest() throws ApiException {
        String organizationId = null;
        String agencyId = null;
        // Agency response = api.findOrganizationPublicTransportAgency(organizationId, agencyId);

        // TODO: test validations
    }
    
    /**
     * Finds an organizations public transport route
     *
     * Finds organization&#39;s single public transport route 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findOrganizationPublicTransportRouteTest() throws ApiException {
        String organizationId = null;
        String routeId = null;
        // Route response = api.findOrganizationPublicTransportRoute(organizationId, routeId);

        // TODO: test validations
    }
    
    /**
     * Finds organizations public transport schedule
     *
     * Finds organizations public transport schedule 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findOrganizationPublicTransportScheduleTest() throws ApiException {
        String organizationId = null;
        String scheduleId = null;
        // Schedule response = api.findOrganizationPublicTransportSchedule(organizationId, scheduleId);

        // TODO: test validations
    }
    
    /**
     * Finds a stop of organizations public transport route
     *
     * Finds a stop of organizations public transport route 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findOrganizationPublicTransportStopTest() throws ApiException {
        String organizationId = null;
        String stopId = null;
        // Stop response = api.findOrganizationPublicTransportStop(organizationId, stopId);

        // TODO: test validations
    }
    
    /**
     * Finds organizations public transport stopTime
     *
     * Finds organizations public transport stopTime 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findOrganizationPublicTransportStopTimeTest() throws ApiException {
        String organizationId = null;
        String stopTimeId = null;
        // StopTime response = api.findOrganizationPublicTransportStopTime(organizationId, stopTimeId);

        // TODO: test validations
    }
    
    /**
     * Finds organizations public transport trip
     *
     * Finds organizations public transport trip 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findOrganizationPublicTransportTripTest() throws ApiException {
        String organizationId = null;
        String tripId = null;
        // Trip response = api.findOrganizationPublicTransportTrip(organizationId, tripId);

        // TODO: test validations
    }
    
    /**
     * Lists organizations public transport agencies
     *
     * Lists organizations public transport agencies 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOrganizationPublicTransportAgenciesTest() throws ApiException {
        String organizationId = null;
        // List<Agency> response = api.listOrganizationPublicTransportAgencies(organizationId);

        // TODO: test validations
    }
    
    /**
     * Lists organizations public transport routes
     *
     * Lists organizations public transport routes 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOrganizationPublicTransportRoutesTest() throws ApiException {
        String organizationId = null;
        // List<Route> response = api.listOrganizationPublicTransportRoutes(organizationId);

        // TODO: test validations
    }
    
    /**
     * Lists schedules of organization&#39;s public transport schedules
     *
     * Lists schedules of organization&#39;s public transport schedules 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOrganizationPublicTransportSchedulesTest() throws ApiException {
        String organizationId = null;
        // List<Schedule> response = api.listOrganizationPublicTransportSchedules(organizationId);

        // TODO: test validations
    }
    
    /**
     * Lists stopTimes of organization&#39;s public transport stopTimes
     *
     * Lists stopTimes of organization&#39;s public transport stopTimes 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOrganizationPublicTransportStopTimesTest() throws ApiException {
        String organizationId = null;
        String stopId = null;
        Integer departureTime = null;
        String sortBy = null;
        String sortDir = null;
        Long firstResult = null;
        Long maxResults = null;
        // List<StopTime> response = api.listOrganizationPublicTransportStopTimes(organizationId, stopId, departureTime, sortBy, sortDir, firstResult, maxResults);

        // TODO: test validations
    }
    
    /**
     * Lists organizations public transport stops
     *
     * Lists organizations public transport stops 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOrganizationPublicTransportStopsTest() throws ApiException {
        String organizationId = null;
        // List<Stop> response = api.listOrganizationPublicTransportStops(organizationId);

        // TODO: test validations
    }
    
    /**
     * Lists trips of organization&#39;s public transport trips
     *
     * Lists trips of organization&#39;s public transport trips 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOrganizationPublicTransportTripsTest() throws ApiException {
        String organizationId = null;
        // List<Trip> response = api.listOrganizationPublicTransportTrips(organizationId);

        // TODO: test validations
    }
    
}
