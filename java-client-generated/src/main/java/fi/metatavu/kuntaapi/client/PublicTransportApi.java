/**
 * Kunta API
 * Solution to combine municipality services under single API.
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package fi.metatavu.kuntaapi.client;

import fi.metatavu.kuntaapi.ApiCallback;
import fi.metatavu.kuntaapi.ApiClient;
import fi.metatavu.kuntaapi.ApiException;
import fi.metatavu.kuntaapi.ApiResponse;
import fi.metatavu.kuntaapi.Configuration;
import fi.metatavu.kuntaapi.Pair;
import fi.metatavu.kuntaapi.ProgressRequestBody;
import fi.metatavu.kuntaapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import fi.metatavu.kuntaapi.client.model.BadRequest;
import fi.metatavu.kuntaapi.client.model.Agency;
import fi.metatavu.kuntaapi.client.model.Forbidden;
import fi.metatavu.kuntaapi.client.model.InternalServerError;
import fi.metatavu.kuntaapi.client.model.Route;
import fi.metatavu.kuntaapi.client.model.Schedule;
import fi.metatavu.kuntaapi.client.model.Stop;
import fi.metatavu.kuntaapi.client.model.StopTime;
import fi.metatavu.kuntaapi.client.model.Trip;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PublicTransportApi {
    private ApiClient apiClient;

    public PublicTransportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PublicTransportApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for findOrganizationPublicTransportAgency */
    private com.squareup.okhttp.Call findOrganizationPublicTransportAgencyCall(String organizationId, String agencyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findOrganizationPublicTransportAgency(Async)");
        }
        
        // verify the required parameter 'agencyId' is set
        if (agencyId == null) {
            throw new ApiException("Missing the required parameter 'agencyId' when calling findOrganizationPublicTransportAgency(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/transportAgencies/{agencyId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()))
        .replaceAll("\\{" + "agencyId" + "\\}", apiClient.escapeString(agencyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Finds an organizations public transport agency
     * Finds organization&#39;s single public transport agency 
     * @param organizationId Organization id (required)
     * @param agencyId Agency id (required)
     * @return Agency
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Agency findOrganizationPublicTransportAgency(String organizationId, String agencyId) throws ApiException {
        ApiResponse<Agency> resp = findOrganizationPublicTransportAgencyWithHttpInfo(organizationId, agencyId);
        return resp.getData();
    }

    /**
     * Finds an organizations public transport agency
     * Finds organization&#39;s single public transport agency 
     * @param organizationId Organization id (required)
     * @param agencyId Agency id (required)
     * @return ApiResponse&lt;Agency&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Agency> findOrganizationPublicTransportAgencyWithHttpInfo(String organizationId, String agencyId) throws ApiException {
        com.squareup.okhttp.Call call = findOrganizationPublicTransportAgencyCall(organizationId, agencyId, null, null);
        Type localVarReturnType = new TypeToken<Agency>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finds an organizations public transport agency (asynchronously)
     * Finds organization&#39;s single public transport agency 
     * @param organizationId Organization id (required)
     * @param agencyId Agency id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findOrganizationPublicTransportAgencyAsync(String organizationId, String agencyId, final ApiCallback<Agency> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findOrganizationPublicTransportAgencyCall(organizationId, agencyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Agency>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findOrganizationPublicTransportRoute */
    private com.squareup.okhttp.Call findOrganizationPublicTransportRouteCall(String organizationId, String routeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findOrganizationPublicTransportRoute(Async)");
        }
        
        // verify the required parameter 'routeId' is set
        if (routeId == null) {
            throw new ApiException("Missing the required parameter 'routeId' when calling findOrganizationPublicTransportRoute(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/transportRoutes/{routeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()))
        .replaceAll("\\{" + "routeId" + "\\}", apiClient.escapeString(routeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Finds an organizations public transport route
     * Finds organization&#39;s single public transport route 
     * @param organizationId Organization id (required)
     * @param routeId Route id (required)
     * @return Route
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Route findOrganizationPublicTransportRoute(String organizationId, String routeId) throws ApiException {
        ApiResponse<Route> resp = findOrganizationPublicTransportRouteWithHttpInfo(organizationId, routeId);
        return resp.getData();
    }

    /**
     * Finds an organizations public transport route
     * Finds organization&#39;s single public transport route 
     * @param organizationId Organization id (required)
     * @param routeId Route id (required)
     * @return ApiResponse&lt;Route&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Route> findOrganizationPublicTransportRouteWithHttpInfo(String organizationId, String routeId) throws ApiException {
        com.squareup.okhttp.Call call = findOrganizationPublicTransportRouteCall(organizationId, routeId, null, null);
        Type localVarReturnType = new TypeToken<Route>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finds an organizations public transport route (asynchronously)
     * Finds organization&#39;s single public transport route 
     * @param organizationId Organization id (required)
     * @param routeId Route id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findOrganizationPublicTransportRouteAsync(String organizationId, String routeId, final ApiCallback<Route> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findOrganizationPublicTransportRouteCall(organizationId, routeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Route>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findOrganizationPublicTransportSchedule */
    private com.squareup.okhttp.Call findOrganizationPublicTransportScheduleCall(String organizationId, String scheduleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findOrganizationPublicTransportSchedule(Async)");
        }
        
        // verify the required parameter 'scheduleId' is set
        if (scheduleId == null) {
            throw new ApiException("Missing the required parameter 'scheduleId' when calling findOrganizationPublicTransportSchedule(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/transportSchedules/{scheduleId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()))
        .replaceAll("\\{" + "scheduleId" + "\\}", apiClient.escapeString(scheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Finds organizations public transport schedule
     * Finds organizations public transport schedule 
     * @param organizationId Organization id (required)
     * @param scheduleId Schedule id (required)
     * @return Schedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Schedule findOrganizationPublicTransportSchedule(String organizationId, String scheduleId) throws ApiException {
        ApiResponse<Schedule> resp = findOrganizationPublicTransportScheduleWithHttpInfo(organizationId, scheduleId);
        return resp.getData();
    }

    /**
     * Finds organizations public transport schedule
     * Finds organizations public transport schedule 
     * @param organizationId Organization id (required)
     * @param scheduleId Schedule id (required)
     * @return ApiResponse&lt;Schedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Schedule> findOrganizationPublicTransportScheduleWithHttpInfo(String organizationId, String scheduleId) throws ApiException {
        com.squareup.okhttp.Call call = findOrganizationPublicTransportScheduleCall(organizationId, scheduleId, null, null);
        Type localVarReturnType = new TypeToken<Schedule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finds organizations public transport schedule (asynchronously)
     * Finds organizations public transport schedule 
     * @param organizationId Organization id (required)
     * @param scheduleId Schedule id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findOrganizationPublicTransportScheduleAsync(String organizationId, String scheduleId, final ApiCallback<Schedule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findOrganizationPublicTransportScheduleCall(organizationId, scheduleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Schedule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findOrganizationPublicTransportStop */
    private com.squareup.okhttp.Call findOrganizationPublicTransportStopCall(String organizationId, String stopId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findOrganizationPublicTransportStop(Async)");
        }
        
        // verify the required parameter 'stopId' is set
        if (stopId == null) {
            throw new ApiException("Missing the required parameter 'stopId' when calling findOrganizationPublicTransportStop(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/transportStops/{stopId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()))
        .replaceAll("\\{" + "stopId" + "\\}", apiClient.escapeString(stopId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Finds a stop of organizations public transport route
     * Finds a stop of organizations public transport route 
     * @param organizationId Organization id (required)
     * @param stopId Stop id (required)
     * @return Stop
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Stop findOrganizationPublicTransportStop(String organizationId, String stopId) throws ApiException {
        ApiResponse<Stop> resp = findOrganizationPublicTransportStopWithHttpInfo(organizationId, stopId);
        return resp.getData();
    }

    /**
     * Finds a stop of organizations public transport route
     * Finds a stop of organizations public transport route 
     * @param organizationId Organization id (required)
     * @param stopId Stop id (required)
     * @return ApiResponse&lt;Stop&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Stop> findOrganizationPublicTransportStopWithHttpInfo(String organizationId, String stopId) throws ApiException {
        com.squareup.okhttp.Call call = findOrganizationPublicTransportStopCall(organizationId, stopId, null, null);
        Type localVarReturnType = new TypeToken<Stop>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finds a stop of organizations public transport route (asynchronously)
     * Finds a stop of organizations public transport route 
     * @param organizationId Organization id (required)
     * @param stopId Stop id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findOrganizationPublicTransportStopAsync(String organizationId, String stopId, final ApiCallback<Stop> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findOrganizationPublicTransportStopCall(organizationId, stopId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Stop>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findOrganizationPublicTransportStopTime */
    private com.squareup.okhttp.Call findOrganizationPublicTransportStopTimeCall(String organizationId, String stopTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findOrganizationPublicTransportStopTime(Async)");
        }
        
        // verify the required parameter 'stopTimeId' is set
        if (stopTimeId == null) {
            throw new ApiException("Missing the required parameter 'stopTimeId' when calling findOrganizationPublicTransportStopTime(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/transportStopTimes/{stopTimeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()))
        .replaceAll("\\{" + "stopTimeId" + "\\}", apiClient.escapeString(stopTimeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Finds organizations public transport stopTime
     * Finds organizations public transport stopTime 
     * @param organizationId Organization id (required)
     * @param stopTimeId StopTime id (required)
     * @return StopTime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StopTime findOrganizationPublicTransportStopTime(String organizationId, String stopTimeId) throws ApiException {
        ApiResponse<StopTime> resp = findOrganizationPublicTransportStopTimeWithHttpInfo(organizationId, stopTimeId);
        return resp.getData();
    }

    /**
     * Finds organizations public transport stopTime
     * Finds organizations public transport stopTime 
     * @param organizationId Organization id (required)
     * @param stopTimeId StopTime id (required)
     * @return ApiResponse&lt;StopTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StopTime> findOrganizationPublicTransportStopTimeWithHttpInfo(String organizationId, String stopTimeId) throws ApiException {
        com.squareup.okhttp.Call call = findOrganizationPublicTransportStopTimeCall(organizationId, stopTimeId, null, null);
        Type localVarReturnType = new TypeToken<StopTime>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finds organizations public transport stopTime (asynchronously)
     * Finds organizations public transport stopTime 
     * @param organizationId Organization id (required)
     * @param stopTimeId StopTime id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findOrganizationPublicTransportStopTimeAsync(String organizationId, String stopTimeId, final ApiCallback<StopTime> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findOrganizationPublicTransportStopTimeCall(organizationId, stopTimeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StopTime>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findOrganizationPublicTransportTrip */
    private com.squareup.okhttp.Call findOrganizationPublicTransportTripCall(String organizationId, String tripId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findOrganizationPublicTransportTrip(Async)");
        }
        
        // verify the required parameter 'tripId' is set
        if (tripId == null) {
            throw new ApiException("Missing the required parameter 'tripId' when calling findOrganizationPublicTransportTrip(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/transportTrips/{tripId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()))
        .replaceAll("\\{" + "tripId" + "\\}", apiClient.escapeString(tripId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Finds organizations public transport trip
     * Finds organizations public transport trip 
     * @param organizationId Organization id (required)
     * @param tripId Trip id (required)
     * @return Trip
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Trip findOrganizationPublicTransportTrip(String organizationId, String tripId) throws ApiException {
        ApiResponse<Trip> resp = findOrganizationPublicTransportTripWithHttpInfo(organizationId, tripId);
        return resp.getData();
    }

    /**
     * Finds organizations public transport trip
     * Finds organizations public transport trip 
     * @param organizationId Organization id (required)
     * @param tripId Trip id (required)
     * @return ApiResponse&lt;Trip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Trip> findOrganizationPublicTransportTripWithHttpInfo(String organizationId, String tripId) throws ApiException {
        com.squareup.okhttp.Call call = findOrganizationPublicTransportTripCall(organizationId, tripId, null, null);
        Type localVarReturnType = new TypeToken<Trip>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finds organizations public transport trip (asynchronously)
     * Finds organizations public transport trip 
     * @param organizationId Organization id (required)
     * @param tripId Trip id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findOrganizationPublicTransportTripAsync(String organizationId, String tripId, final ApiCallback<Trip> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findOrganizationPublicTransportTripCall(organizationId, tripId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Trip>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listOrganizationPublicTransportAgencies */
    private com.squareup.okhttp.Call listOrganizationPublicTransportAgenciesCall(String organizationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportAgencies(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/transportAgencies".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists organizations public transport agencies
     * Lists organizations public transport agencies 
     * @param organizationId Organization id (required)
     * @return List&lt;Agency&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Agency> listOrganizationPublicTransportAgencies(String organizationId) throws ApiException {
        ApiResponse<List<Agency>> resp = listOrganizationPublicTransportAgenciesWithHttpInfo(organizationId);
        return resp.getData();
    }

    /**
     * Lists organizations public transport agencies
     * Lists organizations public transport agencies 
     * @param organizationId Organization id (required)
     * @return ApiResponse&lt;List&lt;Agency&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Agency>> listOrganizationPublicTransportAgenciesWithHttpInfo(String organizationId) throws ApiException {
        com.squareup.okhttp.Call call = listOrganizationPublicTransportAgenciesCall(organizationId, null, null);
        Type localVarReturnType = new TypeToken<List<Agency>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists organizations public transport agencies (asynchronously)
     * Lists organizations public transport agencies 
     * @param organizationId Organization id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOrganizationPublicTransportAgenciesAsync(String organizationId, final ApiCallback<List<Agency>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOrganizationPublicTransportAgenciesCall(organizationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Agency>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listOrganizationPublicTransportRoutes */
    private com.squareup.okhttp.Call listOrganizationPublicTransportRoutesCall(String organizationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportRoutes(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/transportRoutes".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists organizations public transport routes
     * Lists organizations public transport routes 
     * @param organizationId Organization id (required)
     * @return List&lt;Route&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Route> listOrganizationPublicTransportRoutes(String organizationId) throws ApiException {
        ApiResponse<List<Route>> resp = listOrganizationPublicTransportRoutesWithHttpInfo(organizationId);
        return resp.getData();
    }

    /**
     * Lists organizations public transport routes
     * Lists organizations public transport routes 
     * @param organizationId Organization id (required)
     * @return ApiResponse&lt;List&lt;Route&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Route>> listOrganizationPublicTransportRoutesWithHttpInfo(String organizationId) throws ApiException {
        com.squareup.okhttp.Call call = listOrganizationPublicTransportRoutesCall(organizationId, null, null);
        Type localVarReturnType = new TypeToken<List<Route>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists organizations public transport routes (asynchronously)
     * Lists organizations public transport routes 
     * @param organizationId Organization id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOrganizationPublicTransportRoutesAsync(String organizationId, final ApiCallback<List<Route>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOrganizationPublicTransportRoutesCall(organizationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Route>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listOrganizationPublicTransportSchedules */
    private com.squareup.okhttp.Call listOrganizationPublicTransportSchedulesCall(String organizationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportSchedules(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/transportSchedules".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists schedules of organization&#39;s public transport schedules
     * Lists schedules of organization&#39;s public transport schedules 
     * @param organizationId Organization id (required)
     * @return List&lt;Schedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Schedule> listOrganizationPublicTransportSchedules(String organizationId) throws ApiException {
        ApiResponse<List<Schedule>> resp = listOrganizationPublicTransportSchedulesWithHttpInfo(organizationId);
        return resp.getData();
    }

    /**
     * Lists schedules of organization&#39;s public transport schedules
     * Lists schedules of organization&#39;s public transport schedules 
     * @param organizationId Organization id (required)
     * @return ApiResponse&lt;List&lt;Schedule&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Schedule>> listOrganizationPublicTransportSchedulesWithHttpInfo(String organizationId) throws ApiException {
        com.squareup.okhttp.Call call = listOrganizationPublicTransportSchedulesCall(organizationId, null, null);
        Type localVarReturnType = new TypeToken<List<Schedule>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists schedules of organization&#39;s public transport schedules (asynchronously)
     * Lists schedules of organization&#39;s public transport schedules 
     * @param organizationId Organization id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOrganizationPublicTransportSchedulesAsync(String organizationId, final ApiCallback<List<Schedule>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOrganizationPublicTransportSchedulesCall(organizationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Schedule>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listOrganizationPublicTransportStopTimes */
    private com.squareup.okhttp.Call listOrganizationPublicTransportStopTimesCall(String organizationId, String stopId, Integer departureTime, String sortBy, String sortDir, Long firstResult, Long maxResults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportStopTimes(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/transportStopTimes".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (stopId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "stopId", stopId));
        if (departureTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "departureTime", departureTime));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sortBy", sortBy));
        if (sortDir != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sortDir", sortDir));
        if (firstResult != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstResult", firstResult));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxResults", maxResults));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists stopTimes of organization&#39;s public transport stopTimes
     * Lists stopTimes of organization&#39;s public transport stopTimes 
     * @param organizationId Organization id (required)
     * @param stopId Filter stop times by stopId (optional)
     * @param departureTime Filter stop times that depart in or after specified time. Value is defined in seconds since midnight (optional)
     * @param sortBy DEPARTURE_TIME (optional)
     * @param sortDir ASC or DESC (optional)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @return List&lt;StopTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<StopTime> listOrganizationPublicTransportStopTimes(String organizationId, String stopId, Integer departureTime, String sortBy, String sortDir, Long firstResult, Long maxResults) throws ApiException {
        ApiResponse<List<StopTime>> resp = listOrganizationPublicTransportStopTimesWithHttpInfo(organizationId, stopId, departureTime, sortBy, sortDir, firstResult, maxResults);
        return resp.getData();
    }

    /**
     * Lists stopTimes of organization&#39;s public transport stopTimes
     * Lists stopTimes of organization&#39;s public transport stopTimes 
     * @param organizationId Organization id (required)
     * @param stopId Filter stop times by stopId (optional)
     * @param departureTime Filter stop times that depart in or after specified time. Value is defined in seconds since midnight (optional)
     * @param sortBy DEPARTURE_TIME (optional)
     * @param sortDir ASC or DESC (optional)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @return ApiResponse&lt;List&lt;StopTime&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<StopTime>> listOrganizationPublicTransportStopTimesWithHttpInfo(String organizationId, String stopId, Integer departureTime, String sortBy, String sortDir, Long firstResult, Long maxResults) throws ApiException {
        com.squareup.okhttp.Call call = listOrganizationPublicTransportStopTimesCall(organizationId, stopId, departureTime, sortBy, sortDir, firstResult, maxResults, null, null);
        Type localVarReturnType = new TypeToken<List<StopTime>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists stopTimes of organization&#39;s public transport stopTimes (asynchronously)
     * Lists stopTimes of organization&#39;s public transport stopTimes 
     * @param organizationId Organization id (required)
     * @param stopId Filter stop times by stopId (optional)
     * @param departureTime Filter stop times that depart in or after specified time. Value is defined in seconds since midnight (optional)
     * @param sortBy DEPARTURE_TIME (optional)
     * @param sortDir ASC or DESC (optional)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOrganizationPublicTransportStopTimesAsync(String organizationId, String stopId, Integer departureTime, String sortBy, String sortDir, Long firstResult, Long maxResults, final ApiCallback<List<StopTime>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOrganizationPublicTransportStopTimesCall(organizationId, stopId, departureTime, sortBy, sortDir, firstResult, maxResults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<StopTime>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listOrganizationPublicTransportStops */
    private com.squareup.okhttp.Call listOrganizationPublicTransportStopsCall(String organizationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportStops(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/transportStops".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists organizations public transport stops
     * Lists organizations public transport stops 
     * @param organizationId Organization id (required)
     * @return List&lt;Stop&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Stop> listOrganizationPublicTransportStops(String organizationId) throws ApiException {
        ApiResponse<List<Stop>> resp = listOrganizationPublicTransportStopsWithHttpInfo(organizationId);
        return resp.getData();
    }

    /**
     * Lists organizations public transport stops
     * Lists organizations public transport stops 
     * @param organizationId Organization id (required)
     * @return ApiResponse&lt;List&lt;Stop&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Stop>> listOrganizationPublicTransportStopsWithHttpInfo(String organizationId) throws ApiException {
        com.squareup.okhttp.Call call = listOrganizationPublicTransportStopsCall(organizationId, null, null);
        Type localVarReturnType = new TypeToken<List<Stop>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists organizations public transport stops (asynchronously)
     * Lists organizations public transport stops 
     * @param organizationId Organization id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOrganizationPublicTransportStopsAsync(String organizationId, final ApiCallback<List<Stop>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOrganizationPublicTransportStopsCall(organizationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Stop>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listOrganizationPublicTransportTrips */
    private com.squareup.okhttp.Call listOrganizationPublicTransportTripsCall(String organizationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportTrips(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/transportTrips".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists trips of organization&#39;s public transport trips
     * Lists trips of organization&#39;s public transport trips 
     * @param organizationId Organization id (required)
     * @return List&lt;Trip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Trip> listOrganizationPublicTransportTrips(String organizationId) throws ApiException {
        ApiResponse<List<Trip>> resp = listOrganizationPublicTransportTripsWithHttpInfo(organizationId);
        return resp.getData();
    }

    /**
     * Lists trips of organization&#39;s public transport trips
     * Lists trips of organization&#39;s public transport trips 
     * @param organizationId Organization id (required)
     * @return ApiResponse&lt;List&lt;Trip&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Trip>> listOrganizationPublicTransportTripsWithHttpInfo(String organizationId) throws ApiException {
        com.squareup.okhttp.Call call = listOrganizationPublicTransportTripsCall(organizationId, null, null);
        Type localVarReturnType = new TypeToken<List<Trip>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists trips of organization&#39;s public transport trips (asynchronously)
     * Lists trips of organization&#39;s public transport trips 
     * @param organizationId Organization id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOrganizationPublicTransportTripsAsync(String organizationId, final ApiCallback<List<Trip>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOrganizationPublicTransportTripsCall(organizationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Trip>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
