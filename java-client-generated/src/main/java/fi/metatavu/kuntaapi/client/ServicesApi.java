/**
 * Kunta API
 * Solution to combine municipality services under single API.
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package fi.metatavu.kuntaapi.client;

import fi.metatavu.kuntaapi.ApiCallback;
import fi.metatavu.kuntaapi.ApiClient;
import fi.metatavu.kuntaapi.ApiException;
import fi.metatavu.kuntaapi.ApiResponse;
import fi.metatavu.kuntaapi.Configuration;
import fi.metatavu.kuntaapi.Pair;
import fi.metatavu.kuntaapi.ProgressRequestBody;
import fi.metatavu.kuntaapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import fi.metatavu.kuntaapi.client.model.BadRequest;
import fi.metatavu.kuntaapi.client.model.Service;
import fi.metatavu.kuntaapi.client.model.Forbidden;
import fi.metatavu.kuntaapi.client.model.InternalServerError;
import fi.metatavu.kuntaapi.client.model.NotFound;
import fi.metatavu.kuntaapi.client.model.ElectronicServiceChannel;
import fi.metatavu.kuntaapi.client.model.PhoneServiceChannel;
import fi.metatavu.kuntaapi.client.model.PrintableFormServiceChannel;
import fi.metatavu.kuntaapi.client.model.ServiceLocationServiceChannel;
import fi.metatavu.kuntaapi.client.model.WebPageServiceChannel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServicesApi {
    private ApiClient apiClient;

    public ServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServicesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createService */
    private com.squareup.okhttp.Call createServiceCall(Service body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createService(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/services".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create service
     * Creates new service
     * @param body Payload (required)
     * @return Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Service createService(Service body) throws ApiException {
        ApiResponse<Service> resp = createServiceWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create service
     * Creates new service
     * @param body Payload (required)
     * @return ApiResponse&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Service> createServiceWithHttpInfo(Service body) throws ApiException {
        com.squareup.okhttp.Call call = createServiceCall(body, null, null);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create service (asynchronously)
     * Creates new service
     * @param body Payload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createServiceAsync(Service body, final ApiCallback<Service> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createServiceCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findService */
    private com.squareup.okhttp.Call findServiceCall(String serviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling findService(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/services/{serviceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "serviceId" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Finds a service by id
     * Finds service
     * @param serviceId Service id (required)
     * @return Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Service findService(String serviceId) throws ApiException {
        ApiResponse<Service> resp = findServiceWithHttpInfo(serviceId);
        return resp.getData();
    }

    /**
     * Finds a service by id
     * Finds service
     * @param serviceId Service id (required)
     * @return ApiResponse&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Service> findServiceWithHttpInfo(String serviceId) throws ApiException {
        com.squareup.okhttp.Call call = findServiceCall(serviceId, null, null);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finds a service by id (asynchronously)
     * Finds service
     * @param serviceId Service id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findServiceAsync(String serviceId, final ApiCallback<Service> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findServiceCall(serviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findServiceElectronicChannel */
    private com.squareup.okhttp.Call findServiceElectronicChannelCall(String serviceId, String electronicChannelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling findServiceElectronicChannel(Async)");
        }
        
        // verify the required parameter 'electronicChannelId' is set
        if (electronicChannelId == null) {
            throw new ApiException("Missing the required parameter 'electronicChannelId' when calling findServiceElectronicChannel(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/services/{serviceId}/electronicChannels/{electronicChannelId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "serviceId" + "\\}", apiClient.escapeString(serviceId.toString()))
        .replaceAll("\\{" + "electronicChannelId" + "\\}", apiClient.escapeString(electronicChannelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * finds ElectronicChannel by electronicChannelId
     * finds ElectronicChannels by electronicChannelId
     * @param serviceId Service id (required)
     * @param electronicChannelId electronicChannel id (required)
     * @return ElectronicServiceChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ElectronicServiceChannel findServiceElectronicChannel(String serviceId, String electronicChannelId) throws ApiException {
        ApiResponse<ElectronicServiceChannel> resp = findServiceElectronicChannelWithHttpInfo(serviceId, electronicChannelId);
        return resp.getData();
    }

    /**
     * finds ElectronicChannel by electronicChannelId
     * finds ElectronicChannels by electronicChannelId
     * @param serviceId Service id (required)
     * @param electronicChannelId electronicChannel id (required)
     * @return ApiResponse&lt;ElectronicServiceChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ElectronicServiceChannel> findServiceElectronicChannelWithHttpInfo(String serviceId, String electronicChannelId) throws ApiException {
        com.squareup.okhttp.Call call = findServiceElectronicChannelCall(serviceId, electronicChannelId, null, null);
        Type localVarReturnType = new TypeToken<ElectronicServiceChannel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * finds ElectronicChannel by electronicChannelId (asynchronously)
     * finds ElectronicChannels by electronicChannelId
     * @param serviceId Service id (required)
     * @param electronicChannelId electronicChannel id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findServiceElectronicChannelAsync(String serviceId, String electronicChannelId, final ApiCallback<ElectronicServiceChannel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findServiceElectronicChannelCall(serviceId, electronicChannelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ElectronicServiceChannel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findServicePhoneChannel */
    private com.squareup.okhttp.Call findServicePhoneChannelCall(String serviceId, String phoneChannelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling findServicePhoneChannel(Async)");
        }
        
        // verify the required parameter 'phoneChannelId' is set
        if (phoneChannelId == null) {
            throw new ApiException("Missing the required parameter 'phoneChannelId' when calling findServicePhoneChannel(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/services/{serviceId}/phoneChannels/{phoneChannelId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "serviceId" + "\\}", apiClient.escapeString(serviceId.toString()))
        .replaceAll("\\{" + "phoneChannelId" + "\\}", apiClient.escapeString(phoneChannelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * finds PhoneChannel by phoneChannelId
     * finds PhoneChannels by phoneChannelId
     * @param serviceId Service id (required)
     * @param phoneChannelId phoneChannel id (required)
     * @return PhoneServiceChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PhoneServiceChannel findServicePhoneChannel(String serviceId, String phoneChannelId) throws ApiException {
        ApiResponse<PhoneServiceChannel> resp = findServicePhoneChannelWithHttpInfo(serviceId, phoneChannelId);
        return resp.getData();
    }

    /**
     * finds PhoneChannel by phoneChannelId
     * finds PhoneChannels by phoneChannelId
     * @param serviceId Service id (required)
     * @param phoneChannelId phoneChannel id (required)
     * @return ApiResponse&lt;PhoneServiceChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PhoneServiceChannel> findServicePhoneChannelWithHttpInfo(String serviceId, String phoneChannelId) throws ApiException {
        com.squareup.okhttp.Call call = findServicePhoneChannelCall(serviceId, phoneChannelId, null, null);
        Type localVarReturnType = new TypeToken<PhoneServiceChannel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * finds PhoneChannel by phoneChannelId (asynchronously)
     * finds PhoneChannels by phoneChannelId
     * @param serviceId Service id (required)
     * @param phoneChannelId phoneChannel id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findServicePhoneChannelAsync(String serviceId, String phoneChannelId, final ApiCallback<PhoneServiceChannel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findServicePhoneChannelCall(serviceId, phoneChannelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PhoneServiceChannel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findServicePrintableFormChannel */
    private com.squareup.okhttp.Call findServicePrintableFormChannelCall(String serviceId, String printableFormChannelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling findServicePrintableFormChannel(Async)");
        }
        
        // verify the required parameter 'printableFormChannelId' is set
        if (printableFormChannelId == null) {
            throw new ApiException("Missing the required parameter 'printableFormChannelId' when calling findServicePrintableFormChannel(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/services/{serviceId}/printableFormChannels/{printableFormChannelId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "serviceId" + "\\}", apiClient.escapeString(serviceId.toString()))
        .replaceAll("\\{" + "printableFormChannelId" + "\\}", apiClient.escapeString(printableFormChannelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * finds PrintableFormChannel by printableFormChannelId
     * finds PrintableFormChannels by printableFormChannelId
     * @param serviceId Service id (required)
     * @param printableFormChannelId printableFormChannel id (required)
     * @return PrintableFormServiceChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PrintableFormServiceChannel findServicePrintableFormChannel(String serviceId, String printableFormChannelId) throws ApiException {
        ApiResponse<PrintableFormServiceChannel> resp = findServicePrintableFormChannelWithHttpInfo(serviceId, printableFormChannelId);
        return resp.getData();
    }

    /**
     * finds PrintableFormChannel by printableFormChannelId
     * finds PrintableFormChannels by printableFormChannelId
     * @param serviceId Service id (required)
     * @param printableFormChannelId printableFormChannel id (required)
     * @return ApiResponse&lt;PrintableFormServiceChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PrintableFormServiceChannel> findServicePrintableFormChannelWithHttpInfo(String serviceId, String printableFormChannelId) throws ApiException {
        com.squareup.okhttp.Call call = findServicePrintableFormChannelCall(serviceId, printableFormChannelId, null, null);
        Type localVarReturnType = new TypeToken<PrintableFormServiceChannel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * finds PrintableFormChannel by printableFormChannelId (asynchronously)
     * finds PrintableFormChannels by printableFormChannelId
     * @param serviceId Service id (required)
     * @param printableFormChannelId printableFormChannel id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findServicePrintableFormChannelAsync(String serviceId, String printableFormChannelId, final ApiCallback<PrintableFormServiceChannel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findServicePrintableFormChannelCall(serviceId, printableFormChannelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PrintableFormServiceChannel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findServiceServiceLocationChannel */
    private com.squareup.okhttp.Call findServiceServiceLocationChannelCall(String serviceId, String serviceLocationChannelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling findServiceServiceLocationChannel(Async)");
        }
        
        // verify the required parameter 'serviceLocationChannelId' is set
        if (serviceLocationChannelId == null) {
            throw new ApiException("Missing the required parameter 'serviceLocationChannelId' when calling findServiceServiceLocationChannel(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/services/{serviceId}/serviceLocationChannels/{serviceLocationChannelId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "serviceId" + "\\}", apiClient.escapeString(serviceId.toString()))
        .replaceAll("\\{" + "serviceLocationChannelId" + "\\}", apiClient.escapeString(serviceLocationChannelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * finds ServiceLocationChannel by serviceLocationChannelId
     * finds ServiceLocationChannels by serviceLocationChannelId
     * @param serviceId Service id (required)
     * @param serviceLocationChannelId serviceLocationChannel id (required)
     * @return ServiceLocationServiceChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceLocationServiceChannel findServiceServiceLocationChannel(String serviceId, String serviceLocationChannelId) throws ApiException {
        ApiResponse<ServiceLocationServiceChannel> resp = findServiceServiceLocationChannelWithHttpInfo(serviceId, serviceLocationChannelId);
        return resp.getData();
    }

    /**
     * finds ServiceLocationChannel by serviceLocationChannelId
     * finds ServiceLocationChannels by serviceLocationChannelId
     * @param serviceId Service id (required)
     * @param serviceLocationChannelId serviceLocationChannel id (required)
     * @return ApiResponse&lt;ServiceLocationServiceChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceLocationServiceChannel> findServiceServiceLocationChannelWithHttpInfo(String serviceId, String serviceLocationChannelId) throws ApiException {
        com.squareup.okhttp.Call call = findServiceServiceLocationChannelCall(serviceId, serviceLocationChannelId, null, null);
        Type localVarReturnType = new TypeToken<ServiceLocationServiceChannel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * finds ServiceLocationChannel by serviceLocationChannelId (asynchronously)
     * finds ServiceLocationChannels by serviceLocationChannelId
     * @param serviceId Service id (required)
     * @param serviceLocationChannelId serviceLocationChannel id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findServiceServiceLocationChannelAsync(String serviceId, String serviceLocationChannelId, final ApiCallback<ServiceLocationServiceChannel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findServiceServiceLocationChannelCall(serviceId, serviceLocationChannelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceLocationServiceChannel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findServiceWebPageChannel */
    private com.squareup.okhttp.Call findServiceWebPageChannelCall(String serviceId, String webPageChannelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling findServiceWebPageChannel(Async)");
        }
        
        // verify the required parameter 'webPageChannelId' is set
        if (webPageChannelId == null) {
            throw new ApiException("Missing the required parameter 'webPageChannelId' when calling findServiceWebPageChannel(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/services/{serviceId}/webPageChannels/{webPageChannelId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "serviceId" + "\\}", apiClient.escapeString(serviceId.toString()))
        .replaceAll("\\{" + "webPageChannelId" + "\\}", apiClient.escapeString(webPageChannelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * finds WebPageChannel by webPageChannelId
     * finds WebPageChannels by webPageChannelId
     * @param serviceId Service id (required)
     * @param webPageChannelId webPageChannel id (required)
     * @return WebPageServiceChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebPageServiceChannel findServiceWebPageChannel(String serviceId, String webPageChannelId) throws ApiException {
        ApiResponse<WebPageServiceChannel> resp = findServiceWebPageChannelWithHttpInfo(serviceId, webPageChannelId);
        return resp.getData();
    }

    /**
     * finds WebPageChannel by webPageChannelId
     * finds WebPageChannels by webPageChannelId
     * @param serviceId Service id (required)
     * @param webPageChannelId webPageChannel id (required)
     * @return ApiResponse&lt;WebPageServiceChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebPageServiceChannel> findServiceWebPageChannelWithHttpInfo(String serviceId, String webPageChannelId) throws ApiException {
        com.squareup.okhttp.Call call = findServiceWebPageChannelCall(serviceId, webPageChannelId, null, null);
        Type localVarReturnType = new TypeToken<WebPageServiceChannel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * finds WebPageChannel by webPageChannelId (asynchronously)
     * finds WebPageChannels by webPageChannelId
     * @param serviceId Service id (required)
     * @param webPageChannelId webPageChannel id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findServiceWebPageChannelAsync(String serviceId, String webPageChannelId, final ApiCallback<WebPageServiceChannel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findServiceWebPageChannelCall(serviceId, webPageChannelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebPageServiceChannel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listServiceElectronicChannels */
    private com.squareup.okhttp.Call listServiceElectronicChannelsCall(String serviceId, Long firstResult, Long maxResults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling listServiceElectronicChannels(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/services/{serviceId}/electronicChannels".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "serviceId" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (firstResult != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstResult", firstResult));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxResults", maxResults));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists ElectronicChannels by serviceId
     * Lists ElectronicChannels by serviceId
     * @param serviceId Service id (required)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @return List&lt;ElectronicServiceChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ElectronicServiceChannel> listServiceElectronicChannels(String serviceId, Long firstResult, Long maxResults) throws ApiException {
        ApiResponse<List<ElectronicServiceChannel>> resp = listServiceElectronicChannelsWithHttpInfo(serviceId, firstResult, maxResults);
        return resp.getData();
    }

    /**
     * Lists ElectronicChannels by serviceId
     * Lists ElectronicChannels by serviceId
     * @param serviceId Service id (required)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @return ApiResponse&lt;List&lt;ElectronicServiceChannel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ElectronicServiceChannel>> listServiceElectronicChannelsWithHttpInfo(String serviceId, Long firstResult, Long maxResults) throws ApiException {
        com.squareup.okhttp.Call call = listServiceElectronicChannelsCall(serviceId, firstResult, maxResults, null, null);
        Type localVarReturnType = new TypeToken<List<ElectronicServiceChannel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists ElectronicChannels by serviceId (asynchronously)
     * Lists ElectronicChannels by serviceId
     * @param serviceId Service id (required)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listServiceElectronicChannelsAsync(String serviceId, Long firstResult, Long maxResults, final ApiCallback<List<ElectronicServiceChannel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listServiceElectronicChannelsCall(serviceId, firstResult, maxResults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ElectronicServiceChannel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listServicePhoneChannels */
    private com.squareup.okhttp.Call listServicePhoneChannelsCall(String serviceId, Long firstResult, Long maxResults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling listServicePhoneChannels(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/services/{serviceId}/phoneChannels".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "serviceId" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (firstResult != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstResult", firstResult));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxResults", maxResults));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists PhoneChannels by serviceId
     * Lists PhoneChannels by serviceId
     * @param serviceId Service id (required)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @return List&lt;PhoneServiceChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PhoneServiceChannel> listServicePhoneChannels(String serviceId, Long firstResult, Long maxResults) throws ApiException {
        ApiResponse<List<PhoneServiceChannel>> resp = listServicePhoneChannelsWithHttpInfo(serviceId, firstResult, maxResults);
        return resp.getData();
    }

    /**
     * Lists PhoneChannels by serviceId
     * Lists PhoneChannels by serviceId
     * @param serviceId Service id (required)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @return ApiResponse&lt;List&lt;PhoneServiceChannel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PhoneServiceChannel>> listServicePhoneChannelsWithHttpInfo(String serviceId, Long firstResult, Long maxResults) throws ApiException {
        com.squareup.okhttp.Call call = listServicePhoneChannelsCall(serviceId, firstResult, maxResults, null, null);
        Type localVarReturnType = new TypeToken<List<PhoneServiceChannel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists PhoneChannels by serviceId (asynchronously)
     * Lists PhoneChannels by serviceId
     * @param serviceId Service id (required)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listServicePhoneChannelsAsync(String serviceId, Long firstResult, Long maxResults, final ApiCallback<List<PhoneServiceChannel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listServicePhoneChannelsCall(serviceId, firstResult, maxResults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PhoneServiceChannel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listServicePrintableFormChannels */
    private com.squareup.okhttp.Call listServicePrintableFormChannelsCall(String serviceId, Long firstResult, Long maxResults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling listServicePrintableFormChannels(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/services/{serviceId}/printableFormChannels".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "serviceId" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (firstResult != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstResult", firstResult));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxResults", maxResults));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists PrintableFormChannels by serviceId
     * Lists PrintableFormChannels by serviceId
     * @param serviceId Service id (required)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @return List&lt;PrintableFormServiceChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PrintableFormServiceChannel> listServicePrintableFormChannels(String serviceId, Long firstResult, Long maxResults) throws ApiException {
        ApiResponse<List<PrintableFormServiceChannel>> resp = listServicePrintableFormChannelsWithHttpInfo(serviceId, firstResult, maxResults);
        return resp.getData();
    }

    /**
     * Lists PrintableFormChannels by serviceId
     * Lists PrintableFormChannels by serviceId
     * @param serviceId Service id (required)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @return ApiResponse&lt;List&lt;PrintableFormServiceChannel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PrintableFormServiceChannel>> listServicePrintableFormChannelsWithHttpInfo(String serviceId, Long firstResult, Long maxResults) throws ApiException {
        com.squareup.okhttp.Call call = listServicePrintableFormChannelsCall(serviceId, firstResult, maxResults, null, null);
        Type localVarReturnType = new TypeToken<List<PrintableFormServiceChannel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists PrintableFormChannels by serviceId (asynchronously)
     * Lists PrintableFormChannels by serviceId
     * @param serviceId Service id (required)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listServicePrintableFormChannelsAsync(String serviceId, Long firstResult, Long maxResults, final ApiCallback<List<PrintableFormServiceChannel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listServicePrintableFormChannelsCall(serviceId, firstResult, maxResults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PrintableFormServiceChannel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listServiceServiceLocationChannels */
    private com.squareup.okhttp.Call listServiceServiceLocationChannelsCall(String serviceId, Long firstResult, Long maxResults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling listServiceServiceLocationChannels(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/services/{serviceId}/serviceLocationChannels".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "serviceId" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (firstResult != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstResult", firstResult));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxResults", maxResults));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists ServiceLocationChannels by serviceId
     * Lists ServiceLocationChannels by serviceId
     * @param serviceId Service id (required)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @return List&lt;ServiceLocationServiceChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ServiceLocationServiceChannel> listServiceServiceLocationChannels(String serviceId, Long firstResult, Long maxResults) throws ApiException {
        ApiResponse<List<ServiceLocationServiceChannel>> resp = listServiceServiceLocationChannelsWithHttpInfo(serviceId, firstResult, maxResults);
        return resp.getData();
    }

    /**
     * Lists ServiceLocationChannels by serviceId
     * Lists ServiceLocationChannels by serviceId
     * @param serviceId Service id (required)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @return ApiResponse&lt;List&lt;ServiceLocationServiceChannel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ServiceLocationServiceChannel>> listServiceServiceLocationChannelsWithHttpInfo(String serviceId, Long firstResult, Long maxResults) throws ApiException {
        com.squareup.okhttp.Call call = listServiceServiceLocationChannelsCall(serviceId, firstResult, maxResults, null, null);
        Type localVarReturnType = new TypeToken<List<ServiceLocationServiceChannel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists ServiceLocationChannels by serviceId (asynchronously)
     * Lists ServiceLocationChannels by serviceId
     * @param serviceId Service id (required)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listServiceServiceLocationChannelsAsync(String serviceId, Long firstResult, Long maxResults, final ApiCallback<List<ServiceLocationServiceChannel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listServiceServiceLocationChannelsCall(serviceId, firstResult, maxResults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ServiceLocationServiceChannel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listServiceWebPageChannels */
    private com.squareup.okhttp.Call listServiceWebPageChannelsCall(String serviceId, Long firstResult, Long maxResults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling listServiceWebPageChannels(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/services/{serviceId}/webPageChannels".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "serviceId" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (firstResult != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstResult", firstResult));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxResults", maxResults));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists WebPageChannels by serviceId
     * Lists WebPageChannels by serviceId
     * @param serviceId Service id (required)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @return List&lt;WebPageServiceChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<WebPageServiceChannel> listServiceWebPageChannels(String serviceId, Long firstResult, Long maxResults) throws ApiException {
        ApiResponse<List<WebPageServiceChannel>> resp = listServiceWebPageChannelsWithHttpInfo(serviceId, firstResult, maxResults);
        return resp.getData();
    }

    /**
     * Lists WebPageChannels by serviceId
     * Lists WebPageChannels by serviceId
     * @param serviceId Service id (required)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @return ApiResponse&lt;List&lt;WebPageServiceChannel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<WebPageServiceChannel>> listServiceWebPageChannelsWithHttpInfo(String serviceId, Long firstResult, Long maxResults) throws ApiException {
        com.squareup.okhttp.Call call = listServiceWebPageChannelsCall(serviceId, firstResult, maxResults, null, null);
        Type localVarReturnType = new TypeToken<List<WebPageServiceChannel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists WebPageChannels by serviceId (asynchronously)
     * Lists WebPageChannels by serviceId
     * @param serviceId Service id (required)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listServiceWebPageChannelsAsync(String serviceId, Long firstResult, Long maxResults, final ApiCallback<List<WebPageServiceChannel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listServiceWebPageChannelsCall(serviceId, firstResult, maxResults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<WebPageServiceChannel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listServices */
    private com.squareup.okhttp.Call listServicesCall(String organizationId, String search, String sortBy, String sortDir, Long firstResult, Long maxResults, String electronicServiceChannelId, String phoneServiceChannelId, String printableFormServiceChannelId, String serviceLocationServiceChannelId, String webPageServiceChannelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/services".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organizationId", organizationId));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "search", search));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sortBy", sortBy));
        if (sortDir != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sortDir", sortDir));
        if (firstResult != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstResult", firstResult));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxResults", maxResults));
        if (electronicServiceChannelId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "electronicServiceChannelId", electronicServiceChannelId));
        if (phoneServiceChannelId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "phoneServiceChannelId", phoneServiceChannelId));
        if (printableFormServiceChannelId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "printableFormServiceChannelId", printableFormServiceChannelId));
        if (serviceLocationServiceChannelId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "serviceLocationServiceChannelId", serviceLocationServiceChannelId));
        if (webPageServiceChannelId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "webPageServiceChannelId", webPageServiceChannelId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Service list
     * Lists services
     * @param organizationId Return only services belonging to specified organization (optional)
     * @param search Search services by free-text query (optional)
     * @param sortBy define order (NATURAL or SCORE). Default is NATURAL (optional)
     * @param sortDir ASC or DESC. Default is ASC (optional)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @param electronicServiceChannelId Return only services that are connected to specified electronic service channel (optional)
     * @param phoneServiceChannelId Return only services that are connected to specified phone service channel (optional)
     * @param printableFormServiceChannelId Return only services that are connected to specified printable form service channel (optional)
     * @param serviceLocationServiceChannelId Return only services that are connected to specified location service channel (optional)
     * @param webPageServiceChannelId Return only services that are connected to specified webpage service channel (optional)
     * @return List&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Service> listServices(String organizationId, String search, String sortBy, String sortDir, Long firstResult, Long maxResults, String electronicServiceChannelId, String phoneServiceChannelId, String printableFormServiceChannelId, String serviceLocationServiceChannelId, String webPageServiceChannelId) throws ApiException {
        ApiResponse<List<Service>> resp = listServicesWithHttpInfo(organizationId, search, sortBy, sortDir, firstResult, maxResults, electronicServiceChannelId, phoneServiceChannelId, printableFormServiceChannelId, serviceLocationServiceChannelId, webPageServiceChannelId);
        return resp.getData();
    }

    /**
     * Service list
     * Lists services
     * @param organizationId Return only services belonging to specified organization (optional)
     * @param search Search services by free-text query (optional)
     * @param sortBy define order (NATURAL or SCORE). Default is NATURAL (optional)
     * @param sortDir ASC or DESC. Default is ASC (optional)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @param electronicServiceChannelId Return only services that are connected to specified electronic service channel (optional)
     * @param phoneServiceChannelId Return only services that are connected to specified phone service channel (optional)
     * @param printableFormServiceChannelId Return only services that are connected to specified printable form service channel (optional)
     * @param serviceLocationServiceChannelId Return only services that are connected to specified location service channel (optional)
     * @param webPageServiceChannelId Return only services that are connected to specified webpage service channel (optional)
     * @return ApiResponse&lt;List&lt;Service&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Service>> listServicesWithHttpInfo(String organizationId, String search, String sortBy, String sortDir, Long firstResult, Long maxResults, String electronicServiceChannelId, String phoneServiceChannelId, String printableFormServiceChannelId, String serviceLocationServiceChannelId, String webPageServiceChannelId) throws ApiException {
        com.squareup.okhttp.Call call = listServicesCall(organizationId, search, sortBy, sortDir, firstResult, maxResults, electronicServiceChannelId, phoneServiceChannelId, printableFormServiceChannelId, serviceLocationServiceChannelId, webPageServiceChannelId, null, null);
        Type localVarReturnType = new TypeToken<List<Service>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Service list (asynchronously)
     * Lists services
     * @param organizationId Return only services belonging to specified organization (optional)
     * @param search Search services by free-text query (optional)
     * @param sortBy define order (NATURAL or SCORE). Default is NATURAL (optional)
     * @param sortDir ASC or DESC. Default is ASC (optional)
     * @param firstResult First result (optional)
     * @param maxResults Max results (optional)
     * @param electronicServiceChannelId Return only services that are connected to specified electronic service channel (optional)
     * @param phoneServiceChannelId Return only services that are connected to specified phone service channel (optional)
     * @param printableFormServiceChannelId Return only services that are connected to specified printable form service channel (optional)
     * @param serviceLocationServiceChannelId Return only services that are connected to specified location service channel (optional)
     * @param webPageServiceChannelId Return only services that are connected to specified webpage service channel (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listServicesAsync(String organizationId, String search, String sortBy, String sortDir, Long firstResult, Long maxResults, String electronicServiceChannelId, String phoneServiceChannelId, String printableFormServiceChannelId, String serviceLocationServiceChannelId, String webPageServiceChannelId, final ApiCallback<List<Service>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listServicesCall(organizationId, search, sortBy, sortDir, firstResult, maxResults, electronicServiceChannelId, phoneServiceChannelId, printableFormServiceChannelId, serviceLocationServiceChannelId, webPageServiceChannelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Service>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateService */
    private com.squareup.okhttp.Call updateServiceCall(String serviceId, Service body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling updateService(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateService(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/services/{serviceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "serviceId" + "\\}", apiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Updates service
     * Updates service
     * @param serviceId Organization service id (required)
     * @param body Payload (required)
     * @return Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Service updateService(String serviceId, Service body) throws ApiException {
        ApiResponse<Service> resp = updateServiceWithHttpInfo(serviceId, body);
        return resp.getData();
    }

    /**
     * Updates service
     * Updates service
     * @param serviceId Organization service id (required)
     * @param body Payload (required)
     * @return ApiResponse&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Service> updateServiceWithHttpInfo(String serviceId, Service body) throws ApiException {
        com.squareup.okhttp.Call call = updateServiceCall(serviceId, body, null, null);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates service (asynchronously)
     * Updates service
     * @param serviceId Organization service id (required)
     * @param body Payload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateServiceAsync(String serviceId, Service body, final ApiCallback<Service> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateServiceCall(serviceId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
