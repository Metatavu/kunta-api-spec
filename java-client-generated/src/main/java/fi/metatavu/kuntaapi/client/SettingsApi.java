/**
 * Kunta API
 * Solution to combine municipality services under single API.
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package fi.metatavu.kuntaapi.client;

import fi.metatavu.kuntaapi.ApiCallback;
import fi.metatavu.kuntaapi.ApiClient;
import fi.metatavu.kuntaapi.ApiException;
import fi.metatavu.kuntaapi.ApiResponse;
import fi.metatavu.kuntaapi.Configuration;
import fi.metatavu.kuntaapi.Pair;
import fi.metatavu.kuntaapi.ProgressRequestBody;
import fi.metatavu.kuntaapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import fi.metatavu.kuntaapi.client.model.OrganizationSetting;
import fi.metatavu.kuntaapi.client.model.BadRequest;
import fi.metatavu.kuntaapi.client.model.Forbidden;
import fi.metatavu.kuntaapi.client.model.InternalServerError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SettingsApi {
    private ApiClient apiClient;

    public SettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SettingsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createOrganizationSetting */
    private com.squareup.okhttp.Call createOrganizationSettingCall(String organizationId, OrganizationSetting setting, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = setting;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationSetting(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/settings/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Creates organization setting
     * Creates organization setting 
     * @param organizationId Organization id (required)
     * @param setting  (optional)
     * @return OrganizationSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrganizationSetting createOrganizationSetting(String organizationId, OrganizationSetting setting) throws ApiException {
        ApiResponse<OrganizationSetting> resp = createOrganizationSettingWithHttpInfo(organizationId, setting);
        return resp.getData();
    }

    /**
     * Creates organization setting
     * Creates organization setting 
     * @param organizationId Organization id (required)
     * @param setting  (optional)
     * @return ApiResponse&lt;OrganizationSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrganizationSetting> createOrganizationSettingWithHttpInfo(String organizationId, OrganizationSetting setting) throws ApiException {
        com.squareup.okhttp.Call call = createOrganizationSettingCall(organizationId, setting, null, null);
        Type localVarReturnType = new TypeToken<OrganizationSetting>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates organization setting (asynchronously)
     * Creates organization setting 
     * @param organizationId Organization id (required)
     * @param setting  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOrganizationSettingAsync(String organizationId, OrganizationSetting setting, final ApiCallback<OrganizationSetting> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrganizationSettingCall(organizationId, setting, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrganizationSetting>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteOrganizationSetting */
    private com.squareup.okhttp.Call deleteOrganizationSettingCall(String organizationId, String settingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationSetting(Async)");
        }
        
        // verify the required parameter 'settingId' is set
        if (settingId == null) {
            throw new ApiException("Missing the required parameter 'settingId' when calling deleteOrganizationSetting(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/settings/{settingId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()))
        .replaceAll("\\{" + "settingId" + "\\}", apiClient.escapeString(settingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Deletes an organization setting
     * Deletes an organization setting 
     * @param organizationId Organization id (required)
     * @param settingId Setting id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOrganizationSetting(String organizationId, String settingId) throws ApiException {
        deleteOrganizationSettingWithHttpInfo(organizationId, settingId);
    }

    /**
     * Deletes an organization setting
     * Deletes an organization setting 
     * @param organizationId Organization id (required)
     * @param settingId Setting id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOrganizationSettingWithHttpInfo(String organizationId, String settingId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrganizationSettingCall(organizationId, settingId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes an organization setting (asynchronously)
     * Deletes an organization setting 
     * @param organizationId Organization id (required)
     * @param settingId Setting id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrganizationSettingAsync(String organizationId, String settingId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrganizationSettingCall(organizationId, settingId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for findOrganizationSetting */
    private com.squareup.okhttp.Call findOrganizationSettingCall(String organizationId, String settingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findOrganizationSetting(Async)");
        }
        
        // verify the required parameter 'settingId' is set
        if (settingId == null) {
            throw new ApiException("Missing the required parameter 'settingId' when calling findOrganizationSetting(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/settings/{settingId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()))
        .replaceAll("\\{" + "settingId" + "\\}", apiClient.escapeString(settingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Finds organizations setting
     * Finds single organization setting 
     * @param organizationId Organization id (required)
     * @param settingId Setting id (required)
     * @return OrganizationSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrganizationSetting findOrganizationSetting(String organizationId, String settingId) throws ApiException {
        ApiResponse<OrganizationSetting> resp = findOrganizationSettingWithHttpInfo(organizationId, settingId);
        return resp.getData();
    }

    /**
     * Finds organizations setting
     * Finds single organization setting 
     * @param organizationId Organization id (required)
     * @param settingId Setting id (required)
     * @return ApiResponse&lt;OrganizationSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrganizationSetting> findOrganizationSettingWithHttpInfo(String organizationId, String settingId) throws ApiException {
        com.squareup.okhttp.Call call = findOrganizationSettingCall(organizationId, settingId, null, null);
        Type localVarReturnType = new TypeToken<OrganizationSetting>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finds organizations setting (asynchronously)
     * Finds single organization setting 
     * @param organizationId Organization id (required)
     * @param settingId Setting id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findOrganizationSettingAsync(String organizationId, String settingId, final ApiCallback<OrganizationSetting> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findOrganizationSettingCall(organizationId, settingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrganizationSetting>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listOrganizationSettings */
    private com.squareup.okhttp.Call listOrganizationSettingsCall(String organizationId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling listOrganizationSettings(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/settings/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "key", key));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists organizations settings
     * Lists organizations settings 
     * @param organizationId Organization id (required)
     * @param key Setting key (optional)
     * @return List&lt;OrganizationSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OrganizationSetting> listOrganizationSettings(String organizationId, String key) throws ApiException {
        ApiResponse<List<OrganizationSetting>> resp = listOrganizationSettingsWithHttpInfo(organizationId, key);
        return resp.getData();
    }

    /**
     * Lists organizations settings
     * Lists organizations settings 
     * @param organizationId Organization id (required)
     * @param key Setting key (optional)
     * @return ApiResponse&lt;List&lt;OrganizationSetting&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OrganizationSetting>> listOrganizationSettingsWithHttpInfo(String organizationId, String key) throws ApiException {
        com.squareup.okhttp.Call call = listOrganizationSettingsCall(organizationId, key, null, null);
        Type localVarReturnType = new TypeToken<List<OrganizationSetting>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists organizations settings (asynchronously)
     * Lists organizations settings 
     * @param organizationId Organization id (required)
     * @param key Setting key (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOrganizationSettingsAsync(String organizationId, String key, final ApiCallback<List<OrganizationSetting>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOrganizationSettingsCall(organizationId, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OrganizationSetting>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateOrganizationSetting */
    private com.squareup.okhttp.Call updateOrganizationSettingCall(String organizationId, String settingId, OrganizationSetting setting, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = setting;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationSetting(Async)");
        }
        
        // verify the required parameter 'settingId' is set
        if (settingId == null) {
            throw new ApiException("Missing the required parameter 'settingId' when calling updateOrganizationSetting(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/settings/{settingId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()))
        .replaceAll("\\{" + "settingId" + "\\}", apiClient.escapeString(settingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Updates an organization setting
     * Updates an organization setting 
     * @param organizationId Organization id (required)
     * @param settingId Setting id (required)
     * @param setting  (optional)
     * @return OrganizationSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrganizationSetting updateOrganizationSetting(String organizationId, String settingId, OrganizationSetting setting) throws ApiException {
        ApiResponse<OrganizationSetting> resp = updateOrganizationSettingWithHttpInfo(organizationId, settingId, setting);
        return resp.getData();
    }

    /**
     * Updates an organization setting
     * Updates an organization setting 
     * @param organizationId Organization id (required)
     * @param settingId Setting id (required)
     * @param setting  (optional)
     * @return ApiResponse&lt;OrganizationSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrganizationSetting> updateOrganizationSettingWithHttpInfo(String organizationId, String settingId, OrganizationSetting setting) throws ApiException {
        com.squareup.okhttp.Call call = updateOrganizationSettingCall(organizationId, settingId, setting, null, null);
        Type localVarReturnType = new TypeToken<OrganizationSetting>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates an organization setting (asynchronously)
     * Updates an organization setting 
     * @param organizationId Organization id (required)
     * @param settingId Setting id (required)
     * @param setting  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOrganizationSettingAsync(String organizationId, String settingId, OrganizationSetting setting, final ApiCallback<OrganizationSetting> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOrganizationSettingCall(organizationId, settingId, setting, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrganizationSetting>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
