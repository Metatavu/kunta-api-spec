/**
 * Kunta API
 * Solution to combine municipality services under single API.
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package fi.metatavu.kuntaapi.client;

import fi.metatavu.kuntaapi.ApiCallback;
import fi.metatavu.kuntaapi.ApiClient;
import fi.metatavu.kuntaapi.ApiException;
import fi.metatavu.kuntaapi.ApiResponse;
import fi.metatavu.kuntaapi.Configuration;
import fi.metatavu.kuntaapi.Pair;
import fi.metatavu.kuntaapi.ProgressRequestBody;
import fi.metatavu.kuntaapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import fi.metatavu.kuntaapi.client.model.BadRequest;
import fi.metatavu.kuntaapi.client.model.NewsArticle;
import fi.metatavu.kuntaapi.client.model.Forbidden;
import fi.metatavu.kuntaapi.client.model.InternalServerError;
import fi.metatavu.kuntaapi.client.model.Attachment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NewsApi {
    private ApiClient apiClient;

    public NewsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NewsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for findOrganizationNewsArticle */
    private com.squareup.okhttp.Call findOrganizationNewsArticleCall(String organizationId, String newsArticleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findOrganizationNewsArticle(Async)");
        }
        
        // verify the required parameter 'newsArticleId' is set
        if (newsArticleId == null) {
            throw new ApiException("Missing the required parameter 'newsArticleId' when calling findOrganizationNewsArticle(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/news/{newsArticleId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()))
        .replaceAll("\\{" + "newsArticleId" + "\\}", apiClient.escapeString(newsArticleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Finds organizations news article
     * Finds organizations single news article 
     * @param organizationId Organization id (required)
     * @param newsArticleId News article id (required)
     * @return NewsArticle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NewsArticle findOrganizationNewsArticle(String organizationId, String newsArticleId) throws ApiException {
        ApiResponse<NewsArticle> resp = findOrganizationNewsArticleWithHttpInfo(organizationId, newsArticleId);
        return resp.getData();
    }

    /**
     * Finds organizations news article
     * Finds organizations single news article 
     * @param organizationId Organization id (required)
     * @param newsArticleId News article id (required)
     * @return ApiResponse&lt;NewsArticle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NewsArticle> findOrganizationNewsArticleWithHttpInfo(String organizationId, String newsArticleId) throws ApiException {
        com.squareup.okhttp.Call call = findOrganizationNewsArticleCall(organizationId, newsArticleId, null, null);
        Type localVarReturnType = new TypeToken<NewsArticle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finds organizations news article (asynchronously)
     * Finds organizations single news article 
     * @param organizationId Organization id (required)
     * @param newsArticleId News article id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findOrganizationNewsArticleAsync(String organizationId, String newsArticleId, final ApiCallback<NewsArticle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findOrganizationNewsArticleCall(organizationId, newsArticleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NewsArticle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findOrganizationNewsArticleImage */
    private com.squareup.okhttp.Call findOrganizationNewsArticleImageCall(String organizationId, String newsArticleId, String imageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findOrganizationNewsArticleImage(Async)");
        }
        
        // verify the required parameter 'newsArticleId' is set
        if (newsArticleId == null) {
            throw new ApiException("Missing the required parameter 'newsArticleId' when calling findOrganizationNewsArticleImage(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling findOrganizationNewsArticleImage(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/news/{newsArticleId}/images/{imageId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()))
        .replaceAll("\\{" + "newsArticleId" + "\\}", apiClient.escapeString(newsArticleId.toString()))
        .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns an news article image
     * Returns an news article image 
     * @param organizationId Organization id (required)
     * @param newsArticleId News article id (required)
     * @param imageId Event image id (required)
     * @return Attachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Attachment findOrganizationNewsArticleImage(String organizationId, String newsArticleId, String imageId) throws ApiException {
        ApiResponse<Attachment> resp = findOrganizationNewsArticleImageWithHttpInfo(organizationId, newsArticleId, imageId);
        return resp.getData();
    }

    /**
     * Returns an news article image
     * Returns an news article image 
     * @param organizationId Organization id (required)
     * @param newsArticleId News article id (required)
     * @param imageId Event image id (required)
     * @return ApiResponse&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Attachment> findOrganizationNewsArticleImageWithHttpInfo(String organizationId, String newsArticleId, String imageId) throws ApiException {
        com.squareup.okhttp.Call call = findOrganizationNewsArticleImageCall(organizationId, newsArticleId, imageId, null, null);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns an news article image (asynchronously)
     * Returns an news article image 
     * @param organizationId Organization id (required)
     * @param newsArticleId News article id (required)
     * @param imageId Event image id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findOrganizationNewsArticleImageAsync(String organizationId, String newsArticleId, String imageId, final ApiCallback<Attachment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findOrganizationNewsArticleImageCall(organizationId, newsArticleId, imageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getOrganizationNewsArticleImageData */
    private com.squareup.okhttp.Call getOrganizationNewsArticleImageDataCall(String organizationId, String newsArticleId, String imageId, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationNewsArticleImageData(Async)");
        }
        
        // verify the required parameter 'newsArticleId' is set
        if (newsArticleId == null) {
            throw new ApiException("Missing the required parameter 'newsArticleId' when calling getOrganizationNewsArticleImageData(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getOrganizationNewsArticleImageData(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/news/{newsArticleId}/images/{imageId}/data".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()))
        .replaceAll("\\{" + "newsArticleId" + "\\}", apiClient.escapeString(newsArticleId.toString()))
        .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns a news article image data
     * Returns a news article image data 
     * @param organizationId Organization id (required)
     * @param newsArticleId News article id (required)
     * @param imageId Event image id (required)
     * @param size Maximum width or height of image (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] getOrganizationNewsArticleImageData(String organizationId, String newsArticleId, String imageId, Integer size) throws ApiException {
        ApiResponse<byte[]> resp = getOrganizationNewsArticleImageDataWithHttpInfo(organizationId, newsArticleId, imageId, size);
        return resp.getData();
    }

    /**
     * Returns a news article image data
     * Returns a news article image data 
     * @param organizationId Organization id (required)
     * @param newsArticleId News article id (required)
     * @param imageId Event image id (required)
     * @param size Maximum width or height of image (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> getOrganizationNewsArticleImageDataWithHttpInfo(String organizationId, String newsArticleId, String imageId, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getOrganizationNewsArticleImageDataCall(organizationId, newsArticleId, imageId, size, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a news article image data (asynchronously)
     * Returns a news article image data 
     * @param organizationId Organization id (required)
     * @param newsArticleId News article id (required)
     * @param imageId Event image id (required)
     * @param size Maximum width or height of image (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrganizationNewsArticleImageDataAsync(String organizationId, String newsArticleId, String imageId, Integer size, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrganizationNewsArticleImageDataCall(organizationId, newsArticleId, imageId, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listOrganizationNews */
    private com.squareup.okhttp.Call listOrganizationNewsCall(String organizationId, String slug, String tag, String publishedBefore, String publishedAfter, String search, String sortBy, String sortDir, Integer firstResult, Integer maxResults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling listOrganizationNews(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/news".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (slug != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "slug", slug));
        if (tag != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tag", tag));
        if (publishedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "publishedBefore", publishedBefore));
        if (publishedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "publishedAfter", publishedAfter));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "search", search));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sortBy", sortBy));
        if (sortDir != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sortDir", sortDir));
        if (firstResult != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstResult", firstResult));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxResults", maxResults));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists organizations news
     * Lists organizations news 
     * @param organizationId Organization id (required)
     * @param slug Filter with slug (optional)
     * @param tag Filter by tag (optional)
     * @param publishedBefore return only news published before the date (optional)
     * @param publishedAfter return only news published after the date (optional)
     * @param search Search news by free-text query (optional)
     * @param sortBy define order (NATURAL or SCORE). Default is NATURAL (optional)
     * @param sortDir ASC or DESC. Default is ASC (optional)
     * @param firstResult first index of results (optional)
     * @param maxResults maximum number of results (optional)
     * @return List&lt;NewsArticle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<NewsArticle> listOrganizationNews(String organizationId, String slug, String tag, String publishedBefore, String publishedAfter, String search, String sortBy, String sortDir, Integer firstResult, Integer maxResults) throws ApiException {
        ApiResponse<List<NewsArticle>> resp = listOrganizationNewsWithHttpInfo(organizationId, slug, tag, publishedBefore, publishedAfter, search, sortBy, sortDir, firstResult, maxResults);
        return resp.getData();
    }

    /**
     * Lists organizations news
     * Lists organizations news 
     * @param organizationId Organization id (required)
     * @param slug Filter with slug (optional)
     * @param tag Filter by tag (optional)
     * @param publishedBefore return only news published before the date (optional)
     * @param publishedAfter return only news published after the date (optional)
     * @param search Search news by free-text query (optional)
     * @param sortBy define order (NATURAL or SCORE). Default is NATURAL (optional)
     * @param sortDir ASC or DESC. Default is ASC (optional)
     * @param firstResult first index of results (optional)
     * @param maxResults maximum number of results (optional)
     * @return ApiResponse&lt;List&lt;NewsArticle&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<NewsArticle>> listOrganizationNewsWithHttpInfo(String organizationId, String slug, String tag, String publishedBefore, String publishedAfter, String search, String sortBy, String sortDir, Integer firstResult, Integer maxResults) throws ApiException {
        com.squareup.okhttp.Call call = listOrganizationNewsCall(organizationId, slug, tag, publishedBefore, publishedAfter, search, sortBy, sortDir, firstResult, maxResults, null, null);
        Type localVarReturnType = new TypeToken<List<NewsArticle>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists organizations news (asynchronously)
     * Lists organizations news 
     * @param organizationId Organization id (required)
     * @param slug Filter with slug (optional)
     * @param tag Filter by tag (optional)
     * @param publishedBefore return only news published before the date (optional)
     * @param publishedAfter return only news published after the date (optional)
     * @param search Search news by free-text query (optional)
     * @param sortBy define order (NATURAL or SCORE). Default is NATURAL (optional)
     * @param sortDir ASC or DESC. Default is ASC (optional)
     * @param firstResult first index of results (optional)
     * @param maxResults maximum number of results (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOrganizationNewsAsync(String organizationId, String slug, String tag, String publishedBefore, String publishedAfter, String search, String sortBy, String sortDir, Integer firstResult, Integer maxResults, final ApiCallback<List<NewsArticle>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOrganizationNewsCall(organizationId, slug, tag, publishedBefore, publishedAfter, search, sortBy, sortDir, firstResult, maxResults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<NewsArticle>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listOrganizationNewsArticleImages */
    private com.squareup.okhttp.Call listOrganizationNewsArticleImagesCall(String organizationId, String newsArticleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling listOrganizationNewsArticleImages(Async)");
        }
        
        // verify the required parameter 'newsArticleId' is set
        if (newsArticleId == null) {
            throw new ApiException("Missing the required parameter 'newsArticleId' when calling listOrganizationNewsArticleImages(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}/news/{newsArticleId}/images".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()))
        .replaceAll("\\{" + "newsArticleId" + "\\}", apiClient.escapeString(newsArticleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns list of news article images
     * Returns list of news article images 
     * @param organizationId Organization id (required)
     * @param newsArticleId News article id (required)
     * @return List&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Attachment> listOrganizationNewsArticleImages(String organizationId, String newsArticleId) throws ApiException {
        ApiResponse<List<Attachment>> resp = listOrganizationNewsArticleImagesWithHttpInfo(organizationId, newsArticleId);
        return resp.getData();
    }

    /**
     * Returns list of news article images
     * Returns list of news article images 
     * @param organizationId Organization id (required)
     * @param newsArticleId News article id (required)
     * @return ApiResponse&lt;List&lt;Attachment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Attachment>> listOrganizationNewsArticleImagesWithHttpInfo(String organizationId, String newsArticleId) throws ApiException {
        com.squareup.okhttp.Call call = listOrganizationNewsArticleImagesCall(organizationId, newsArticleId, null, null);
        Type localVarReturnType = new TypeToken<List<Attachment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns list of news article images (asynchronously)
     * Returns list of news article images 
     * @param organizationId Organization id (required)
     * @param newsArticleId News article id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOrganizationNewsArticleImagesAsync(String organizationId, String newsArticleId, final ApiCallback<List<Attachment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOrganizationNewsArticleImagesCall(organizationId, newsArticleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Attachment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
